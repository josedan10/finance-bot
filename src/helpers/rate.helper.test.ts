import Sinon from 'sinon';
import { calculateUSDAmountByRate, searchRateByDate } from './rate.helper';
import { createDailyExchangeRate } from '../../prisma/factories';
import { prismaMock } from '../../modules/database/database.module.mock';

const sandbox = Sinon.createSandbox();

describe('searchRateByDate', () => {
	afterEach(() => {
		sandbox.resetHistory();
		sandbox.reset();
		sandbox.restore();
	});
	// Returns a DailyExchangeRate object when a valid date is provided
	it('should return a DailyExchangeRate object when a valid date is provided', async () => {
		const validDate = '2022-01-01';
		const expectedRate = await createDailyExchangeRate({ id: 1, date: '2022-01-01', bcvPrice: 1 });
		const mockFindFirst = prismaMock.dailyExchangeRate.findFirst.mockResolvedValue(expectedRate);

		const result = await searchRateByDate(validDate);

		expect(result).toEqual(expectedRate);
		expect(mockFindFirst).toHaveBeenCalledTimes(1);
	});

	// Returns null when no DailyExchangeRate object is found
	it('should return null when no DailyExchangeRate object is found', async () => {
		const validDate = '2022-01-01';

		const mockFindFirst = prismaMock.dailyExchangeRate.findFirst.mockResolvedValue(null);
		const result = await searchRateByDate(validDate);

		expect(result).toBeNull();
		expect(mockFindFirst).toHaveBeenCalledTimes(1);
	});

	it('should return a DailyExchangeRate object when no date is provided', async () => {
		const expectedRate = await createDailyExchangeRate({ id: 1, date: '2022-01-01', bcvPrice: 1 });

		const mockFindFirst = prismaMock.dailyExchangeRate.findFirst.mockResolvedValue(expectedRate);

		const result = await searchRateByDate();

		expect(result).toEqual(expectedRate);
		expect(mockFindFirst).toHaveBeenCalledTimes(1);
	});
});

// Generated by CodiumAI

describe('calculateUSDAmountByRate', () => {
	// Returns a number when given valid input values.
	it('should return the correct USD amount when given valid input values', () => {
		// Arrange
		const originalCurrencyAmount = 100;
		const bcvPrice = 10;

		// Act
		const result = calculateUSDAmountByRate(originalCurrencyAmount, bcvPrice);

		// Assert
		expect(result).toBe(10);
	});

	// Returns NaN when given NaN input values.
	it('should return NaN when given NaN input values', () => {
		// Arrange
		const originalCurrencyAmount = NaN;
		const bcvPrice = NaN;

		// Act
		const result = calculateUSDAmountByRate(originalCurrencyAmount, bcvPrice);

		// Assert
		expect(result).toBeNaN();
	});
});
