import { ManualTransaction } from './index.js';
import prisma from '../database/database.module.js';
import Sinon from 'sinon';

describe('ManualTransaction', () => {
	// Tests that registerManualTransaction successfully registers a manual transaction with valid data
	it('should successfully register a manual transaction with valid data', async () => {
		// Mock the database methods
		const paymentMethod = { id: 1 };
		const category = { id: 1 };
		const transaction = { id: 1 };

		prisma.paymentMethod.findUnique = Sinon.stub().resolves(paymentMethod);
		prisma.transaction.create = Sinon.stub().resolves(transaction);
		prisma.category.findUnique = Sinon.stub().resolves(category);

		// Call the registerManualTransaction method
		const data = [
			'amount=100;',
			'desc=My description;',
			'method=Mercantil Venezuela;',
			'type=debit;',
			'cat=Entertaiment',
		];
		await ManualTransaction.registerManualTransaction(data);

		Sinon.assert.calledOnce(prisma.paymentMethod.findUnique);
		Sinon.assert.calledOnce(prisma.transaction.create);
		Sinon.assert.calledOnce(prisma.category.findUnique);
	});

	// Tests that registerManualTransaction successfully registers a manual transaction with minimum data (amount, payment method, type, category)
	it('should successfully register a manual transaction with minimum data', async () => {
		// Mock the database methods
		const paymentMethod = { id: 1 };
		const category = { id: 1 };
		const transaction = { id: 1 };

		prisma.paymentMethod.findUnique = Sinon.stub().resolves(paymentMethod);
		prisma.transaction.create = Sinon.stub().resolves(transaction);
		prisma.category.findUnique = Sinon.stub().resolves(category);

		// Call the registerManualTransaction method
		const data = [
			'amount=100;',
			'desc=My description;',
			'method=Mercantil Venezuela;',
			'type=debit;',
			'cat=Entertaiment',
		];
		const result = await ManualTransaction.registerManualTransaction(data);

		// Check the result
		expect(result).toEqual(transaction);

		Sinon.assert.calledOnce(prisma.paymentMethod.findUnique);
		Sinon.assert.calledOnce(prisma.transaction.create);
		Sinon.assert.calledOnce(prisma.category.findUnique);
	});
});

// Generated by CodiumAI

describe('registerManualTransaction', () => {
	// Tests that the method creates a transaction with all required fields
	it('should create a transaction with all required fields', async () => {
		// Arrange
		const data = [
			'amount=100;',
			'desc=My description;',
			'method=Mercantil Venezuela;',
			'type=debit;',
			'cat=ENTERTAIMENT',
		];
		const transaction = { id: 1, amount: 100, description: 'My description', type: 'debit' };

		// uses sinon to mock the database methods
		prisma.transaction.create = Sinon.stub().resolves(transaction);
		prisma.dailyExchangeRate.findFirst = Sinon.stub().resolves(null);
		prisma.paymentMethod.findUnique = Sinon.stub().resolves({ id: 1 });
		prisma.category.findUnique = Sinon.stub().resolves({ id: 1 });
		// Act
		const result = await ManualTransaction.registerManualTransaction(data);

		// Assert
		expect(result).toEqual(transaction);
		Sinon.assert.calledOnce(prisma.transaction.create);
	});

	// Tests that the method creates a transaction with optional fields (currency, date)
	it('should create a transaction with optional fields', async () => {
		// Arrange
		const data = [
			'amount=100;',
			'desc=My description;',
			'method=Mercantil Venezuela;',
			'type=debit;',
			'cat=ENTERTAIMENT;',
			'currency=VES;',
			'date=2022-01-01',
		];
		const transaction = { id: 1, amount: 100, description: 'My description', type: 'debit' };
		prisma.transaction.create = Sinon.stub().resolves(transaction);
		prisma.dailyExchangeRate.findFirst = Sinon.stub().resolves(null);
		prisma.paymentMethod.findUnique = Sinon.stub().resolves({ id: 1 });
		prisma.category.findUnique = Sinon.stub().resolves({ id: 1 });

		// Act
		const result = await ManualTransaction.registerManualTransaction(data);

		// Assert
		expect(result).toEqual(transaction);
		Sinon.assert.calledOnce(prisma.transaction.create);
	});

	// Tests that the method converts VES to USD and creates a transaction
	it('should convert VES to USD and create a transaction', async () => {
		// Arrange
		const data = [
			'amount=100;',
			'desc=My description;',
			'method=Mercantil Venezuela;',
			'type=debit;',
			'cat=Entertaiment;',
			'currency=VES',
		];
		const transaction = { id: 1, amount: 1, description: 'My description', type: 'debit' };
		const exchangeRate = { monitorPrice: 100 };

		// Mock the database methods
		prisma.transaction.create = Sinon.stub().resolves(transaction);
		prisma.dailyExchangeRate.findFirst = Sinon.stub().resolves(exchangeRate);
		prisma.paymentMethod.findUnique = Sinon.stub().resolves({ id: 1 });
		prisma.category.findUnique = Sinon.stub().resolves({ id: 1 });

		// Act
		const result = await ManualTransaction.registerManualTransaction(data);

		// Assert
		expect(result).toEqual(transaction);
		Sinon.assert.calledOnce(prisma.transaction.create);
	});

	// Tests that the method throws an error if any required field is missing
	it('should throw an error if any required field is missing', async () => {
		// Arrange
		const data = ['amount=100;', 'desc=My description;', 'method=Mercantil Venezuela;', 'type=debit;'];
		const sampleData =
			'amount=100; desc=My description; method=Mercantil Venezuela; type=debit; cat=CATEGORY_NAME; currency=VES; date=2021-01-01';

		// Act & Assert
		await expect(ManualTransaction.registerManualTransaction(data)).rejects.toThrow(
			`Invalid data: ${data}... Try with ${sampleData}`
		);
	});

	// Tests that the method throws an error if payment method is not found
	it('should throw an error if payment method is not found', async () => {
		// Arrange
		const data = [
			'amount=100;',
			'desc=My description;',
			'method=Mercantil Venezuela;',
			'type=debit;',
			'cat=ENTERTAIMENT;',
		];

		prisma.paymentMethod.findUnique = Sinon.stub().resolves(null);

		// Act & Assert
		await expect(ManualTransaction.registerManualTransaction(data)).rejects.toThrow(
			'Payment method Mercantil Venezuela not found'
		);
	});

	// Tests that the method throws an error if category is not found
	it('should throw an error if category is not found', async () => {
		// Arrange
		const data = [
			'amount=100;',
			'desc=My description;',
			'method=Mercantil Venezuela;',
			'type=debit;',
			'cat=RANDOM_CATEGORY;',
		];

		prisma.paymentMethod.findUnique = Sinon.stub().resolves({ id: 1 });
		prisma.category.findUnique = Sinon.stub().resolves(null);

		// Act & Assert
		await expect(ManualTransaction.registerManualTransaction(data)).rejects.toThrow(
			'Category RANDOM_CATEGORY not found'
		);
	});
});
