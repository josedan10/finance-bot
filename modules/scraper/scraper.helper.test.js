// Generated by CodiumAI

import { randomSleep, sleep } from './scraper.helper';

describe('code snippet', () => {
	// The sleep function should return a promise that resolves after the given number of milliseconds.
	it('should return a promise that resolves after the given number of milliseconds', async () => {
		const start = Date.now();
		await sleep(2000);
		const end = Date.now();
		expect(end - start).toBeGreaterThanOrEqual(2000);
	});

	// The randomSleep function should return a promise that resolves after a random number of milliseconds between the given min and max values.
	it('should return a promise that resolves after a random number of milliseconds between the given min and max values', async () => {
		const start = Date.now();
		await randomSleep(1000, 3000);
		const end = Date.now();
		expect(end - start).toBeGreaterThanOrEqual(1000);
		expect(end - start).toBeLessThanOrEqual(3000);
	});

	// The default values for the sleep function should be 3000 milliseconds.
	it('should have default values of 3000 milliseconds', async () => {
		const start = Date.now();
		await sleep();
		const end = Date.now();
		expect(end - start).toBeGreaterThanOrEqual(3000);
	});

	// The sleep function should work correctly with a value of 0 passed in.
	it('should work correctly with a value of 0 passed in', async () => {
		const start = Date.now();
		await sleep(0);
		const end = Date.now();
		expect(end - start).toBeLessThan(100);
	});
});
