import nock from 'nock';
import { TELEGRAM_BOT_URL, TELEGRAM_FILE_URL } from '../../src/telegram/variables';
import TelegramModule from './telegram.module';
import fs from 'fs';
import FormData from 'form-data';
import { jest } from '@jest/globals';

const loadJSON = (path) => JSON.parse(fs.readFileSync(new URL(path, import.meta.url)));
const mockResponse = loadJSON('../../mocks/telegram/getMe.json');

describe('>> Telegram Bot Module: ', function () {
	beforeAll(() => {
		/*
        Mock API using nock for the REST API
        Endpoint. Any calls to URL https://api.telegram.org/bot
        will be intercepted by the fake_api nock  
    */

		nock(`${TELEGRAM_BOT_URL}`).post('/getMe').reply(200, mockResponse);

		nock(`${TELEGRAM_BOT_URL}`).post('/sendMessage').reply(200, 'Message sent');

		nock(`${TELEGRAM_BOT_URL}`).post('/sendMessage').reply(200, 'Message sent');

		nock(`${TELEGRAM_BOT_URL}`).post('/setWebhook').reply(200, 'Webhook set');

		nock(`${TELEGRAM_BOT_URL}`).post('/getFile').query(true).reply(200, 'File found');

		nock(`${TELEGRAM_FILE_URL}`).get('/documents/file_46.xlsx').reply(200, 'File content');
	});

	afterAll(() => {
		nock.cleanAll();
	});

	test('Get bot information', async () => {
		const res = await TelegramModule.sendRequest('getMe');
		expect(res.status).toBe(200);
	});

	test('Send message', async () => {
		const res = await TelegramModule.sendMessage('Hello World', 123456789);
		expect(res.status).toBe(200);
		expect(res.data).toBe('Message sent');
	});

	test('Set webhook', async () => {
		const res = await TelegramModule.setWebhook('https://webhook.site/0d9a2f3a-5b2f-4b1c-8b3f-3e7f1a9d9b9b');
		expect(res.status).toBe(200);
		expect(res.data).toBe('Webhook set');
	});

	test('Get file path using fileId', async () => {
		const res = await TelegramModule.getFilePath('1234');
		expect(res.status).toBe(200);
		expect(res.data).toBe('File found');
	});

	test('Get file content using file path', async () => {
		const res = await TelegramModule.getFileContent('documents/file_46.xlsx');
		expect(res.status).toBe(200);
		expect(res.data).toBe('File content');
	});

	test('Command parser', () => {
		const command = TelegramModule.commandParser('/cashTransaction 1234');
		expect(command.commandName).toBe('cashTransaction');
		expect(command.commandArgs).toContain('1234');
	});
});

// Generated by CodiumAI

describe('sendImage', () => {
	jest.mock('axios');
	jest.mock('form-data');
	jest.mock('fs');

	// Sends a valid image file and caption to a valid chat ID
	it('should send a valid image file and caption to a valid chat ID', () => {
		// Create an instance of the TelegramBot class
		const telegramBot = TelegramModule;

		// Mock the sendRequest method
		telegramBot.sendRequest = jest.fn().mockResolvedValue({});

		// Mock the fs.createReadStream method
		fs.createReadStream = jest.fn().mockReturnValue('stream');

		// Mock the FormData.append method
		FormData.prototype.append = jest.fn();

		// Call the sendImage method
		telegramBot.sendImage('image.jpg', 'caption', 'chatId');

		// Assert that the necessary methods were called with the correct arguments
		expect(telegramBot.sendRequest).toHaveBeenCalledWith(
			'sendPhoto',
			expect.any(FormData),
			{ chat_id: 'chatId' },
			{ 'Content-Type': 'multipart/form-data' }
		);
		expect(fs.createReadStream).toHaveBeenCalledWith('image.jpg');
		expect(FormData.prototype.append).toHaveBeenCalledWith('photo', 'stream', { filename: 'caption' });
	});

	// Sends a valid image file without a caption to a valid chat ID
	it('should send a valid image file without a caption to a valid chat ID', () => {
		// Create an instance of the TelegramBot class
		const telegramBot = TelegramModule;

		// Mock the sendRequest method
		telegramBot.sendRequest = jest.fn().mockResolvedValue({});

		// Mock the fs.createReadStream method
		fs.createReadStream = jest.fn().mockReturnValue('stream');

		// Mock the FormData.append method
		FormData.prototype.append = jest.fn();

		// Call the sendImage method
		telegramBot.sendImage('image.jpg', '', 'chatId');

		// Assert that the necessary methods were called with the correct arguments
		expect(telegramBot.sendRequest).toHaveBeenCalledWith(
			'sendPhoto',
			expect.any(FormData),
			{ chat_id: 'chatId' },
			{ 'Content-Type': 'multipart/form-data' }
		);
		expect(fs.createReadStream).toHaveBeenCalledWith('image.jpg');
		expect(FormData.prototype.append).toHaveBeenCalledWith('photo', 'stream', { filename: '' });
	});

	// Sends a valid image file with a blank caption to a valid chat ID
	it('should send a valid image file with a blank caption to a valid chat ID', () => {
		// Create an instance of the TelegramBot class
		const telegramBot = TelegramModule;

		// Mock the sendRequest method
		telegramBot.sendRequest = jest.fn().mockResolvedValue({});

		// Mock the fs.createReadStream method
		fs.createReadStream = jest.fn().mockReturnValue('stream');

		// Mock the FormData.append method
		FormData.prototype.append = jest.fn();

		// Call the sendImage method
		telegramBot.sendImage('image.jpg', '', 'chatId');

		// Assert that the necessary methods were called with the correct arguments
		expect(telegramBot.sendRequest).toHaveBeenCalledWith(
			'sendPhoto',
			expect.any(FormData),
			{ chat_id: 'chatId' },
			{ 'Content-Type': 'multipart/form-data' }
		);
		expect(fs.createReadStream).toHaveBeenCalledWith('image.jpg');
		expect(FormData.prototype.append).toHaveBeenCalledWith('photo', 'stream', { filename: '' });
	});

	// Sends an invalid image file path to a valid chat ID
	it('should not send an invalid image file path to a valid chat ID', () => {
		// Create an instance of the TelegramBot class
		const telegramBot = TelegramModule;

		// Mock the sendRequest method
		telegramBot.sendRequest = jest.fn().mockResolvedValue({});

		// Mock the fs.createReadStream method to throw an error
		fs.createReadStream = jest.fn().mockImplementation(() => {
			throw new Error('Invalid file path');
		});

		// Call the sendImage method
		telegramBot.sendImage('invalid.jpg', 'caption', 'chatId');

		// Assert that the necessary methods were not called
		expect(telegramBot.sendRequest).not.toHaveBeenCalled();
	});

	// Sends an invalid chat ID with a valid image file and caption
	it('should not send an invalid chat ID with a valid image file and caption', () => {
		// Create an instance of the TelegramBot class
		const telegramBot = TelegramModule;

		// Mock the sendRequest method
		telegramBot.sendRequest = jest.fn().mockResolvedValue({});

		// Mock the fs.createReadStream method
		fs.createReadStream = jest.fn().mockReturnValue('stream');

		// Mock the FormData.append method
		FormData.prototype.append = jest.fn();

		// Call the sendImage method
		telegramBot.sendImage('image.jpg', 'caption', '');

		// Assert that the necessary methods were not called
		expect(telegramBot.sendRequest).not.toHaveBeenCalled();
	});

	// Sends an invalid chat ID with a valid image file and no caption
	it('should not send an invalid chat ID with a valid image file and no caption', () => {
		// Create an instance of the TelegramBot class
		const telegramBot = TelegramModule;

		// Mock the sendRequest method
		telegramBot.sendRequest = jest.fn().mockResolvedValue({});

		// Mock the fs.createReadStream method
		fs.createReadStream = jest.fn().mockReturnValue('stream');

		// Mock the FormData.append method
		FormData.prototype.append = jest.fn();

		// Call the sendImage method
		telegramBot.sendImage('image.jpg', '', '');

		// Assert that the necessary methods were not called
		expect(telegramBot.sendRequest).not.toHaveBeenCalled();
	});
});
