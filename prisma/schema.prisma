datasource db {
  url      = env("DATABASE_URL")
  provider = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String            @unique @db.VarChar(20)
  description     String?           @db.VarChar(255)
  amountLimit     Decimal?          @db.Decimal(10, 2)
  transaction     Transaction[]
  shopCategory    ShopCategory[]
  categoryKeyword CategoryKeyword[]
}

model Keyword {
  id              Int               @id @default(autoincrement())
  name            String            @unique @db.VarChar(100)
  description     String?           @db.VarChar(255)
  categoryKeyword CategoryKeyword[]
}

model CategoryKeyword {
  id         Int      @id @default(autoincrement())
  categoryId Int
  keywordId  Int
  category   Category @relation(fields: [categoryId], references: [id])
  keyword    Keyword  @relation(fields: [keywordId], references: [id])

  @@unique([categoryId, keywordId])
}

model PaymentMethod {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique @db.VarChar(20)
  transaction             Transaction[]
  platformMonthlyRegister PlatformMonthlyRegister[]
}

model Transaction {
  id                     Int            @id @default(autoincrement())
  date                   DateTime
  description            String?        @db.VarChar(255)
  amount                 Decimal?       @db.Decimal(10, 2)
  originalCurrencyAmount Decimal?       @db.Decimal(10, 2)
  referenceId            String?        @db.VarChar(30)
  currency               String         @db.VarChar(3)
  type                   String         @db.VarChar(10)
  isMonthly              Boolean        @default(false)
  isAnnually             Boolean        @default(false)
  telegramFileIds        String?        @db.VarChar(255)
  category               Category?      @relation(fields: [categoryId], references: [id])
  categoryId             Int?
  shopId                 Int?
  shop                   Shop?          @relation(fields: [shopId], references: [id])
  paymentMethod          PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId        Int?
  reviewed               Boolean        @default(false)
  reviewedAt             DateTime?

  @@unique(fields: [description, referenceId, date])
}

model PlatformMonthlyRegister {
  id              Int           @id @default(autoincrement())
  startAmount     Decimal       @db.Decimal(10, 2)
  endAmount       Decimal       @db.Decimal(10, 2)
  year            Int           @db.Int
  month           Int           @db.Int
  paymentMethodId Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@unique([paymentMethodId, year, month])
  @@index([paymentMethodId, year, month])
}

model Suscription {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(20)
  keyWord     String? @db.VarChar(20)
  paymentDate String? @db.VarChar(10)
  type        String  @db.VarChar(20)
}

model Shop {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(20)
  keyWord      String?        @db.VarChar(20)
  shopCategory ShopCategory[]
  transaction  Transaction[]
}

model ShopCategory {
  id         Int      @id @default(autoincrement())
  categoryId Int
  shopId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  shop       Shop     @relation(fields: [shopId], references: [id])
}

model DailyExchangeRate {
  id           Int      @id @default(autoincrement())
  monitorPrice Decimal? @db.Decimal(10, 2)
  bcvPrice     Decimal? @db.Decimal(10, 2)
  date         DateTime
  createdAt    DateTime @default(now())
}

model TaskQueue {
  id                Int       @id @default(autoincrement())
  body              String?   @db.Text()
  type              String    @db.VarChar(50)
  status            String    @default("pending") @db.VarChar(15)
  attemptsRemaining Int       @default(10) @db.Int
  createdBy         String?   @db.VarChar(20)
  createdAt         DateTime  @default(now())
  completedAt       DateTime?
}
